name: Deploy to DigitalOcean

on:
    workflow_run:
        workflows: ['Build and Publish Docker Images']
        branches: [master]
        types:
            - completed

jobs:
    deploy-demo:
        runs-on: ubuntu-latest

        environment: demo

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Log in to DigitalOcean Container Registry with short-lived credentials
              run: doctl registry login --expiry-seconds 600

            - name: Save DigitalOcean kubeconfig with short-lived credentials
              run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-ever

            - name: Apply k8s manifests changes in DigitalOcean k8s cluster (if any)
              run: |
                  envsubst < $GITHUB_WORKSPACE/.deploy/k8s/k8s-manifest.demo.yaml | kubectl --context do-sfo2-k8s-ever apply -f -
              env:
                DB_NAME: 'gauzy_demo'

            # we need this step because for now we just use :latest tag
            # note: for production we will use different strategy later
            - name: Restart Pods to pick up :latest tag version
              run: |
                  kubectl --context do-sfo2-k8s-ever rollout restart deployment/gauzy-demo-api
                  kubectl --context do-sfo2-k8s-ever rollout restart deployment/gauzy-demo-webapp

    deploy-prod:
        runs-on: ubuntu-latest

        environment: prod

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Log in to DigitalOcean Container Registry with short-lived credentials
              run: doctl registry login --expiry-seconds 600

            - name: Save DigitalOcean kubeconfig with short-lived credentials
              run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-ever

            - name: Write PostgreSQL Certificate file
              run: |
                echo "$DB_CA_CERT" | base64 --decode > ${HOME}/ca-certificate.crt
              env:
                DB_CA_CERT: '${{ secrets.DB_CA_CERT }}'

            - name: Apply k8s manifests changes in DigitalOcean k8s cluster (if any)
              run: |
                  envsubst < $GITHUB_WORKSPACE/.deploy/k8s/k8s-manifest.prod.yaml | kubectl --context do-sfo2-k8s-ever apply -f -
              env:
                DB_URI: '${{ secrets.DB_URI }}'
                DB_HOST: '${{ secrets.DB_HOST }}'
                DB_USER: '${{ secrets.DB_USER }}'
                DB_PASS: '${{ secrets.DB_PASS }}'
                DB_NAME: 'gauzy'
                DB_CA_CERT: '${{ secrets.DB_CA_CERT }}'
                DB_SSL_MODE: 'true'
                AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
                AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'

            # we need this step because for now we just use :latest tag
            # note: for production we will use different strategy later
            - name: Restart Pods to pick up :latest tag version
              run: |
                  kubectl --context do-sfo2-k8s-ever rollout restart deployment/gauzy-prod-api
                  kubectl --context do-sfo2-k8s-ever rollout restart deployment/gauzy-prod-webapp
